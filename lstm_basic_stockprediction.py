# -*- coding: utf-8 -*-
"""LSTM-Basic-StockPrediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YV2EZPP5rKWshAwh_8Oqki4xQIgUVZVM
"""

# Using Long Short Tem Memory (LSTM) to predict CLOSING stock Apple Inc using the past 60 day stock price. Basic understanding.

################################
#import the libraries
import math
import pandas_datareader as web
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

###############################

# get the stock quote
df = web.DataReader('AAPL',data_source='yahoo',start='2012-01-01', end='2020-11-01')
#show data
df

#get the number of rows and col in the dataset
df.shape

#visualize the closing price history
plt.figure(figsize=(16,8))
plt.title('Close Price History APPLE')
plt.plot(df['Close'])
plt.xlabel('Date',fontsize=18)
plt.ylabel('Close Price USD ($)', fontsize=18)
plt.show()

#Create a new dataframe with only the close column
data = df.filter(['Close'])
#Convert dataframe to a np array
dataset = data.values
#Get the number of rows to train the model on, use math.ceil to round up the value
training_data_len = math.ceil(len(dataset)*0.8)
#print
training_data_len

#Scale the data before training, change the value betwen 0 to 1
scaler = MinMaxScaler(feature_range=(0,1))
#transform the data between 0 and 1
scaled_data = scaler.fit_transform(dataset)
#print
scaled_data

# Create training dataset
# Create the scaled training dataset, row from 0 to training_data_len, and all coloumn [0:training_data_len, :]
#take only 80% of the dataset as train_data
train_data = scaled_data[0:training_data_len, :]
# train_data

#split the data into x_train and y_train
x_train = []
y_train = []

interval = 100
#60 because we predict based on previous 60 days
for i in range (interval, len(train_data)):
  #append from index 0 to 59 
  x_train.append(train_data[i-interval : i,0])
  #append from index 60 (61 value) - the next day
  y_train.append(train_data[i,0])
  if i<=interval:
    print(x_train)
    print(y_train)
    print()

#Convert the x_train and y_train to numpy arrays so that we can train the model
x_train, y_train = np.array(x_train), np.array(y_train)

# Current data is in 2D shape (1730,60)
x_train.shape
# Reshape the data because LSTM expect input of 3 dimensional data (num of sample, num of steps, num of features)
# x_train = np.reshape(x_train,(1730,60,1))
x_train = np.reshape(x_train,(x_train.shape[0],x_train.shape[1],1))
x_train.shape

# Build the LSTM Model
model = Sequential()
# Add layers to model (50 is number of neurons)
model.add(LSTM(50, return_sequences=True, input_shape=(x_train.shape[1],1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))
print(model.summary())

# Compile the model
#optimizer to improve upon the loss function
#loss function is used to measure how well the model did during training
model.compile(optimizer='adam',loss='mean_squared_error')

#train the model
history=model.fit(x_train, y_train, batch_size=1, epochs=10)

# list all data in history
print(history.history.keys())

# # summarize history for accuracy
# plt.plot(history.history['accuracy'])
# plt.plot(history.history['val_accuracy'])
# plt.title('model accuracy')
# plt.ylabel('accuracy')
# plt.xlabel('epoch')
# plt.legend(['train', 'test'], loc='upper left')
# plt.show()
# summarize history for loss
plt.plot(history.history['loss'])
# plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

#Create the test dataset
#Create new array containing scaled value from index 1730 to 2237 (test dataset)
test_data = scaled_data[training_data_len - interval :, :]
# Create the dataset x_test and y_test
x_test = []
y_test = dataset[training_data_len:,:]
#y_test are the values that we want the model to predict
for i in range(interval, len(test_data)):
  x_test.append(test_data[i-interval:i,0])
#now x_test dataset contain the last 60 days values in array, y_test contrain the 61 value
# x_test
# y_test

#Convert the x_test to numpy arrays so that we can train the model
x_test = np.array(x_test)
# x_test

# Current data is in 2D shape (447,60)
# x_test.shape
# Reshape the data because LSTM expect input of 3 dimensional data (num of sample, num of steps, num of features)
# x_test = np.reshape(x_test,(447,60,1))
x_test = np.reshape(x_test,(x_test.shape[0],x_test.shape[1],1))
x_test.shape

# Get the models predicted price values
predictions = model.predict(x_test)
#unscaling the value to be USD number instead of 0-1
predictions = scaler.inverse_transform(predictions)
# predictions

# Get the root mean squared error (RMSE) to evaluate the model, the lower the better, can evaluate with other parameter too
rmse = np.sqrt(np.mean(predictions - y_test)**2)
rmse

# plot the data
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions

#Visualize the data
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Date', fontsize=18)
plt.ylabel('Close Price USD($)', fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train','Val','Predictions'], loc='lower right')
plt.show()

#Show the valid and predicted prices
valid

# Try predict closing price for 19/11/2020
# Get the quote
apple_quote = web.DataReader('AAPL',data_source='yahoo',start='2012-01-01', end='2020-11-19')
#Create new dataframe
new_df = apple_quote.filter(['Close'])
# Get the last 60 days closing price value and convert to an array
last_60_days = new_df[-interval:].values
#scale the data
last_60_days_scaled = scaler.transform(last_60_days)
#Create empty list
X_test =[]
#append the last 60 days
X_test.append(last_60_days_scaled)
#convert the X_test to an numpy
X_test = np.array(X_test)
#Reshape the data
X_test = np.reshape(X_test,(X_test.shape[0], X_test.shape[1],1))
# Get the predicted scaled price
pred_price = model.predict(X_test)
#undo the scaling
pred_price = scaler.inverse_transform(pred_price)
print(pred_price)

apple_quote2 = web.DataReader('AAPL',data_source='yahoo',start='2020-11-19', end='2020-11-19')
print(apple_quote2['Close'])